// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import type {
	DeleteDownloadData,
	DeleteDownloadErrors,
	DeleteDownloadResponses,
	DeleteSessionData,
	DeleteSessionErrors,
	DeleteSessionResponses,
	GetDownloadData,
	GetDownloadErrors,
	GetDownloadFileData,
	GetDownloadFileErrors,
	GetDownloadFileResponses,
	GetDownloadResponses,
	GetDownloadsData,
	GetDownloadsErrors,
	GetDownloadsOptionsData,
	GetDownloadsOptionsErrors,
	GetDownloadsOptionsResponses,
	GetDownloadsResponses,
	GetNextSearchData,
	GetNextSearchErrors,
	GetNextSearchResponses,
	GetSearchData,
	GetSearchErrors,
	GetSearchResponses,
	GetSessionData,
	GetSessionResponses,
	GetSessionValidateData,
	GetSessionValidateErrors,
	GetSessionValidateResponses,
	GetVideoData,
	GetVideoErrors,
	GetVideoResponses,
	PostDownloadsData,
	PostDownloadsErrors,
	PostDownloadsResponses,
	PutDownloadsData,
	PutDownloadsErrors,
	PutDownloadsResponses
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get Search
 */
export const getSearch = <ThrowOnError extends boolean = false>(
	options: Options<GetSearchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetSearchResponses, GetSearchErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search',
		...options
	});
};

/**
 * Get Next Search
 */
export const getNextSearch = <ThrowOnError extends boolean = false>(
	options?: Options<GetNextSearchData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetNextSearchResponses,
		GetNextSearchErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search/next',
		...options
	});
};

/**
 * Get Video
 */
export const getVideo = <ThrowOnError extends boolean = false>(
	options: Options<GetVideoData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetVideoResponses, GetVideoErrors, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search/video',
		...options
	});
};

/**
 * Delete Session
 */
export const deleteSession = <ThrowOnError extends boolean = false>(
	options?: Options<DeleteSessionData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<
		DeleteSessionResponses,
		DeleteSessionErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/session',
		...options
	});
};

/**
 * Get Session
 */
export const getSession = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetSessionResponses, unknown, ThrowOnError>({
		url: '/session',
		...options
	});
};

/**
 * Get Session Validate
 */
export const getSessionValidate = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionValidateData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSessionValidateResponses,
		GetSessionValidateErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/session/validate',
		...options
	});
};

/**
 * Get Downloads
 */
export const getDownloads = <ThrowOnError extends boolean = false>(
	options?: Options<GetDownloadsData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetDownloadsResponses,
		GetDownloadsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options
	});
};

/**
 * Post Downloads
 */
export const postDownloads = <ThrowOnError extends boolean = false>(
	options: Options<PostDownloadsData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		PostDownloadsResponses,
		PostDownloadsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Put Downloads
 */
export const putDownloads = <ThrowOnError extends boolean = false>(
	options: Options<PutDownloadsData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).put<
		PutDownloadsResponses,
		PutDownloadsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Downloads Options
 */
export const getDownloadsOptions = <ThrowOnError extends boolean = false>(
	options?: Options<GetDownloadsOptionsData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetDownloadsOptionsResponses,
		GetDownloadsOptionsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/options',
		...options
	});
};

/**
 * Delete Download
 */
export const deleteDownload = <ThrowOnError extends boolean = false>(
	options: Options<DeleteDownloadData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteDownloadResponses,
		DeleteDownloadErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/{download_id}',
		...options
	});
};

/**
 * Get Download
 */
export const getDownload = <ThrowOnError extends boolean = false>(
	options: Options<GetDownloadData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetDownloadResponses,
		GetDownloadErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/{download_id}',
		...options
	});
};

/**
 * Get Download File
 */
export const getDownloadFile = <ThrowOnError extends boolean = false>(
	options: Options<GetDownloadFileData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetDownloadFileResponses,
		GetDownloadFileErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/{download_id}/file',
		...options
	});
};
