// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-fetch';

import type {
	DeleteDownloadData,
	DeleteDownloadError,
	DeleteDownloadResponse,
	DeleteSessionData,
	DeleteSessionResponse,
	GetDownloadData,
	GetDownloadError,
	GetDownloadFileData,
	GetDownloadFileError,
	GetDownloadResponse,
	GetDownloadsData,
	GetDownloadsOptionsData,
	GetDownloadsOptionsResponse,
	GetDownloadsResponse,
	GetNextSearchData,
	GetNextSearchResponse,
	GetSearchData,
	GetSearchError,
	GetSearchResponse,
	GetSessionData,
	GetSessionResponse,
	GetSessionValidateData,
	GetSessionValidateResponse,
	GetVideoData,
	GetVideoError,
	GetVideoResponse,
	PostDownloadsData,
	PostDownloadsError,
	PostDownloadsResponse,
	PutDownloadsData,
	PutDownloadsError,
	PutDownloadsResponse
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
};

/**
 * Get Search
 */
export const getSearch = <ThrowOnError extends boolean = false>(
	options: Options<GetSearchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetSearchResponse, GetSearchError, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search',
		...options
	});
};

/**
 * Get Next Search
 */
export const getNextSearch = <ThrowOnError extends boolean = false>(
	options?: Options<GetNextSearchData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetNextSearchResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search/next',
		...options
	});
};

/**
 * Get Video
 */
export const getVideo = <ThrowOnError extends boolean = false>(
	options: Options<GetVideoData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetVideoResponse, GetVideoError, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/search/video',
		...options
	});
};

/**
 * Delete Session
 */
export const deleteSession = <ThrowOnError extends boolean = false>(
	options?: Options<DeleteSessionData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<DeleteSessionResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/session',
		...options
	});
};

/**
 * Get Session
 */
export const getSession = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetSessionResponse, unknown, ThrowOnError>({
		url: '/session',
		...options
	});
};

/**
 * Get Session Validate
 */
export const getSessionValidate = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionValidateData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetSessionValidateResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/session/validate',
		...options
	});
};

/**
 * Get Downloads
 */
export const getDownloads = <ThrowOnError extends boolean = false>(
	options?: Options<GetDownloadsData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetDownloadsResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options
	});
};

/**
 * Post Downloads
 */
export const postDownloads = <ThrowOnError extends boolean = false>(
	options: Options<PostDownloadsData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		PostDownloadsResponse,
		PostDownloadsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

/**
 * Put Downloads
 */
export const putDownloads = <ThrowOnError extends boolean = false>(
	options: Options<PutDownloadsData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).put<
		PutDownloadsResponse,
		PutDownloadsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

/**
 * Get Downloads Options
 */
export const getDownloadsOptions = <ThrowOnError extends boolean = false>(
	options?: Options<GetDownloadsOptionsData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetDownloadsOptionsResponse, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/downloads/options',
			...options
		}
	);
};

/**
 * Delete Download
 */
export const deleteDownload = <ThrowOnError extends boolean = false>(
	options: Options<DeleteDownloadData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteDownloadResponse,
		DeleteDownloadError,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/{download_id}',
		...options
	});
};

/**
 * Get Download
 */
export const getDownload = <ThrowOnError extends boolean = false>(
	options: Options<GetDownloadData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetDownloadResponse, GetDownloadError, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/downloads/{download_id}',
			...options
		}
	);
};

/**
 * Get Download File
 */
export const getDownloadFile = <ThrowOnError extends boolean = false>(
	options: Options<GetDownloadFileData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<unknown, GetDownloadFileError, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/downloads/{download_id}/file',
		...options
	});
};
